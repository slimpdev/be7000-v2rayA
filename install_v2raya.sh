#!/bin/sh

# Находим первую папку в /mnt/
USB_DIR=$(find /mnt -mindepth 1 -maxdepth 1 -type d | head -n 1)

# Проверяем, что USB-папка найдена
if [ -z "$USB_DIR" ]; then
  echo "USB-папка не найдена в /mnt/"
  exit 1
fi

echo "USB-папка найдена: $USB_DIR"

# Путь к папке с .ipk файлами
IPK_DIR="$USB_DIR/v2rayA-native/ipk_files"

# Проверка, что папка с файлами существует
if [ ! -d "$IPK_DIR" ]; then
  echo "Папка $IPK_DIR не найдена."
  exit 1
fi

# Создаем целевые папки
mkdir -p "$USB_DIR/v2rayA-native/v2ray-core"
mkdir -p "$USB_DIR/v2rayA-native/v2raya"
mkdir -p "$USB_DIR/v2rayA-native/v2ray-geoip"
mkdir -p "$USB_DIR/v2rayA-native/v2ray-geosite"

# Функция для полного распаковывания .ipk файла
unpack_ipk() {
  local ipk_file="$1"
  local target_dir="$2"

  # Проверка на наличие файла
  if [ ! -f "$IPK_DIR/$ipk_file" ]; then
    echo "Файл $ipk_file не найден в $IPK_DIR."
    return 1
  fi

  # Создаем временную папку для извлечения
  temp_dir=$(mktemp -d)

  # Извлекаем содержимое .ipk файла во временную папку
  echo "Распаковываем $ipk_file в $temp_dir ..."
  tar -xzf "$IPK_DIR/$ipk_file" -C "$temp_dir" || {
    echo "Ошибка распаковки $ipk_file"
    return 1
  }

  # Распаковываем control.tar.gz и data.tar.gz, если они существуют
  if [ -f "$temp_dir/control.tar.gz" ]; then
    tar -xzf "$temp_dir/control.tar.gz" -C "$target_dir"
  fi

  if [ -f "$temp_dir/data.tar.gz" ]; then
    tar -xzf "$temp_dir/data.tar.gz" -C "$target_dir"
  fi

  # Удаляем временную папку
  rm -rf "$temp_dir"
}

# Выполнение распаковки для каждого .ipk файла
unpack_ipk "v2ray-core_5.18.0-1_aarch64_generic.ipk" "$USB_DIR/v2rayA-native/v2ray-core"
unpack_ipk "v2raya_2.2.5.7-1_aarch64_generic.ipk" "$USB_DIR/v2rayA-native/v2raya"
unpack_ipk "v2ray-geoip_202410030052-1_all.ipk" "$USB_DIR/v2rayA-native/v2ray-geoip"
unpack_ipk "v2ray-geosite_20240920063125-1_all.ipk" "$USB_DIR/v2rayA-native/v2ray-geosite"

echo "Полная распаковка завершена."


# Создаем новые папки
mkdir -p "$USB_DIR"/usr/bin
mkdir -p "$USB_DIR"/usr/share
mkdir -p "$USB_DIR"/usr/share/v2ray
mkdir -p "$USB_DIR"/usr/share/v2raya

# Копируем в них наши файлы
cp "$USB_DIR"/v2rayA-native/v2ray-geoip/usr/share/v2ray/geoip.dat "$USB_DIR"/usr/share/v2ray
cp "$USB_DIR"/v2rayA-native/v2ray-geoip/usr/share/v2ray/geoip.dat "$USB_DIR"/usr/share/v2raya
cp "$USB_DIR"/v2rayA-native/v2ray-geosite/usr/share/v2ray/geosite.dat "$USB_DIR"/usr/share/v2ray
cp "$USB_DIR"/v2rayA-native/v2ray-geosite/usr/share/v2ray/geosite.dat "$USB_DIR"/usr/share/v2raya
cp -r "$USB_DIR"/v2rayA-native/v2ray-core/usr/bin/v2ray "$USB_DIR"/usr/bin/v2ray
cp -r "$USB_DIR"/v2rayA-native/v2raya/usr/bin/v2raya "$USB_DIR"/usr/bin/v2raya

# Даем права на выполнение
chmod +x "$USB_DIR"/usr/bin/v2ray
chmod +x "$USB_DIR"/usr/bin/v2raya

# Создаем папку конфига
mkdir -p "$USB_DIR"/v2raya/config

# Создаем папки
mkdir -p /data/v2raya/etc/config
mkdir -p /data/v2raya/etc/init.d

# Копируем файлы
cp "$USB_DIR"/v2rayA-native/v2ray-core/etc/config/v2ray /data/v2raya/etc/config/v2ray
cp "$USB_DIR"/v2rayA-native/v2raya/etc/config/v2raya /data/v2raya/etc/config/v2raya

# Перезапись содержимого файла v2ray с новыми настройками
cat << EOF > /data/v2raya/etc/config/v2ray
config v2ray 'enabled'
    option enabled '1'

config v2ray 'config'
    option confdir '$USB_DIR/etc/v2ray'
    list conffiles '$USB_DIR/etc/v2ray/config.json'
    option datadir '$USB_DIR/usr/share/v2ray'
    option format 'json'
    option memconservative '1'
EOF

echo "Конфигурация /data/v2raya/etc/config/v2ray обновлена."


# Перезапись содержимого файла v2raya с новыми настройками
cat << EOF > /data/v2raya/etc/config/v2raya
config v2raya 'config'
    option enabled '1'

    # Listening address
    option address '0.0.0.0:2017'

    # Make sure your IPv6 network works fine before you turn it on.
    # Optional values: auto, on, off.
    option ipv6_support 'auto'

    # Experimental feature. Make sure you have installed nftables.
    # Optional values: auto, on, off.
    option nftables_support 'auto'

    # Optional values: trace, debug, info, warn or error
    option log_level 'info'

    # Maximum number of days to keep log files
    option log_max_days '3'

    option log_disable_color '1'

    option log_disable_timestamp '0'

    # Executable v2ray binary path. Auto-detect if put it empty
    option v2ray_bin "$USB_DIR/usr/bin/v2ray"

    # Additional v2ray config directory, files in it will be combined with config generated by v2rayA
    option v2ray_confdir "$USB_DIR/usr/share/v2ray"

    # The executable file to run in the transparent proxy life-cycle.
    # v2rayA will pass in the --transparent-type (tproxy, redirect)
    #   and --stage (pre-start, post-start, pre-stop, post-stop) arguments.
    option transparent_hook ''

    # The executable file to run in the v2ray-core life-cycle.
    # v2rayA will pass in the --stage (pre-start, post-start, pre-stop, post-stop) argument.
    option core_hook ''

    # The executable file to run in the v2ray-core life-cycle.
    # v2rayA will pass in the --stage (pre-start, post-start, pre-stop, post-stop) argument.
    option plugin_manager ''
EOF

echo "Конфигурация /data/v2raya/etc/config/v2raya обновлена."


# Копируем файлы
cp "$USB_DIR"/v2rayA-native/v2ray-core/etc/init.d/v2ray /data/v2raya/etc/init.d/v2ray
cp "$USB_DIR"/v2rayA-native/v2raya/etc/init.d/v2raya /data/v2raya/etc/init.d/v2raya

# Даем права на выполнение
chmod +x /data/v2raya/etc/init.d/v2ray
chmod +x /data/v2raya/etc/init.d/v2raya

# Перезапись содержимого файла init.d/v2ray
cat << EOF > /data/v2raya/etc/init.d/v2ray
#!/bin/sh /etc/rc.common

USE_PROCD=1
START=99

CONF="v2ray"
PROG="$USB_DIR/usr/bin/v2ray"

start_service() {
	config_load "\$CONF"

	local enabled
	config_get_bool enabled "enabled" "enabled" "0"
	[ "\$enabled" -eq "1" ] || return 1

	local confdir
	local conffiles
	local datadir
	local format

	config_get confdir "config" "confdir"
	config_get conffiles "config" "conffiles"
	config_get datadir "config" "datadir" "$USB_DIR/usr/share/v2ray"
	config_get format "config" "format" "json"
	config_get_bool memconservative "config" "memconservative" "1"

	procd_open_instance "\$CONF"
	procd_set_param command "\$PROG" run
	[ -n "\$confdir" ] && procd_append_param command -confdir "\$confdir"
	[ -n "\$conffiles" ] && {
		for i in \$conffiles
		do
			procd_append_param command -config "\$i"
		done
	}
	[ -n "\$format" ] && procd_append_param command -format "\$format"
	procd_set_param env v2ray.local.asset="\$datadir"
	[ "\$memconservative" -eq "1" ] && procd_append_param env V2RAY_CONF_GEOLOADER="memconservative"
	procd_set_param file \$conffiles

	procd_set_param limits core="unlimited"
	procd_set_param limits nofile="1000000 1000000"
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn

	procd_close_instance
}

reload_service() {
	stop
	start
}

service_triggers() {
	procd_add_reload_trigger "\$CONF"
}
EOF

echo "Содержимое файла /data/v2raya/etc/init.d/v2ray обновлено."


# Перезапись содержимого файла init.d/v2raya
cat << EOF > /data/v2raya/etc/init.d/v2raya
#!/bin/sh /etc/rc.common
# Copyright (C) 2021 Tianling Shen <cnsztl@immortalwrt.org>

USE_PROCD=1
START=99

CONF="v2raya"
PROG="$USB_DIR/usr/bin/v2raya"

is_enabled() {
    local enabled
    config_get_bool enabled "\$1" "\$2" "\${3:-0}"
    if [ "\$enabled" -eq "1" ]; then
        return 0
    else
        return 1
    fi
}

append_env() {
    procd_append_param env "V2RAYA_\$(echo "\$1" | tr "[a-z]" "[A-Z]")"="\$2"
}

append_env_arg() {
    local value
    config_get value "\$1" "\$2" \$3
    [ -n "\$value" ] && append_env "\$2" "\$value"
}

append_env_bool() {
    is_enabled "\$1" "\$2" && append_env "\$2" "true"
}

start_service() {
    config_load "\$CONF"

    is_enabled "config" "enabled" || return 1

    procd_open_instance "\$CONF"
    procd_set_param command "\$PROG"
    procd_set_param env XDG_DATA_HOME="$USB_DIR/usr/share"

    # Add commands
    procd_append_param command --v2ray-bin="$USB_DIR/usr/bin/v2ray"
    procd_append_param command --v2ray-assetsdir="$USB_DIR/usr/share/v2raya"
    procd_append_param command --config="$USB_DIR/v2raya/config"

    # Add envs
    procd_append_param env V2RAYA_V2RAY_BIN="$USB_DIR/usr/bin/v2ray"

    append_env "config" "$USB_DIR/v2raya/config"
    append_env "log_file" "$USB_DIR/v2raya/v2raya.log"

    append_env_arg "config" "address" "0.0.0.0:2017"
    append_env_arg "config" "ipv6_support" "auto"
    append_env_arg "config" "nftables_support" "auto"
    append_env_arg "config" "log_level" "info"
    append_env_arg "config" "log_max_days" "3"
    append_env_arg "config" "v2ray_bin" "$USB_DIR/usr/bin/v2ray"
    append_env_arg "config" "v2ray_confdir" "$USB_DIR/etc/xray"
    append_env_arg "config" "transparent_hook"
    append_env_arg "config" "core_hook"
    append_env_arg "config" "plugin_manager"
    append_env_bool "config" "log_disable_color"
    append_env_bool "config" "log_disable_timestamp"

    procd_set_param limits core="unlimited"
    procd_set_param limits nofile="1000000 1000000"
    procd_set_param respawn
    procd_set_param stdout 1
    procd_set_param stderr 1

    procd_close_instance
}

reload_service() {
    stop
    start
}

service_triggers() {
    procd_add_reload_trigger "\$CONF"
}

EOF

echo "Содержимое файла data/v2raya/etc/init.d/v2raya обновлено."


# Создаем файл /data/startup_v2raya.sh с командами для установки и запуска v2raya
cat << EOF > /data/startup_v2raya.sh
#!/bin/sh

# install v2raya
cp -p -f /data/v2raya/etc/init.d/v2ray /etc/init.d/v2ray
cp -p -f /data/v2raya/etc/init.d/v2raya /etc/init.d/v2raya

cp -p -f /data/v2raya/etc/config/v2ray /etc/config/v2ray
cp -p -f /data/v2raya/etc/config/v2raya /etc/config/v2raya

/etc/init.d/v2ray enable
/etc/init.d/v2ray start

/etc/init.d/v2raya enable
/etc/init.d/v2raya start
EOF

# Даем права на выполнение файла startup_v2raya.sh
chmod +x /data/startup_v2raya.sh

echo "Файл /data/startup_v2raya.sh создан и готов к использованию."

# Создание бэкапа
#cp "etc/config/firewall" "etc/config/firewall.bak"

##################################
# Путь к файлу конфигурации firewall
FIREWALL_CONFIG="/etc/config/firewall"

# Создаем бэкап
cp "$FIREWALL_CONFIG" "$FIREWALL_CONFIG.bak"

# Создаем временный файл для записи изменений
TEMP_FILE=$(mktemp)

# Флаг для определения нахождения в блоке config defaults
IN_DEFAULTS_BLOCK=false

# Читаем файл построчно и вносим изменения
while IFS= read -r line; do
    # Проверяем начало и конец блока config defaults
    if echo "$line" | grep -q "^config defaults"; then
        IN_DEFAULTS_BLOCK=true
    elif echo "$line" | grep -q "^config " && [ "$IN_DEFAULTS_BLOCK" = true ]; then
        IN_DEFAULTS_BLOCK=false
    fi

    # Если находимся в блоке config defaults, заменяем нужные строки
    if [ "$IN_DEFAULTS_BLOCK" = true ]; then
        case "$line" in
            *option\ syn_flood*) echo "	option syn_flood '0'" >> "$TEMP_FILE" ;;
            *option\ input*) echo "	option input 'ACCEPT'" >> "$TEMP_FILE" ;;
            *option\ output*) echo "	option output 'ACCEPT'" >> "$TEMP_FILE" ;;
            *option\ forward*) echo "	option forward 'ACCEPT'" >> "$TEMP_FILE" ;;
            *option\ drop_invalid*) echo "	option drop_invalid '1'" >> "$TEMP_FILE" ;;
            *option\ fw_enable*) echo "	option fw_enable '1'" >> "$TEMP_FILE" ;;
            *option\ port_trigger*) echo "	option port_trigger '1'" >> "$TEMP_FILE" ;;
            *option\ disable_ipv6*) echo "	option disable_ipv6 '1'" >> "$TEMP_FILE" ;;
            *) echo "$line" >> "$TEMP_FILE" ;;
        esac
    else
        # Строки вне блока config defaults просто добавляем
        echo "$line" >> "$TEMP_FILE"
    fi
done < "$FIREWALL_CONFIG"

# Перезаписываем оригинальный файл
mv "$TEMP_FILE" "$FIREWALL_CONFIG"

##################################

# Добавляем блок конфигурации в конец файла /etc/config/firewall
if ! grep -q "config include 'startup_v2raya'" /etc/config/firewall; then
  echo "
config include 'startup_v2raya'
	option type 'script'
	option path '/data/startup_v2raya.sh'
	option enabled '1'
" >> /etc/config/firewall
  echo "Блок конфигурации добавлен."
else
  echo "Блок конфигурации уже существует."
fi

echo "Конфигурация firewall обновлена. Бэкап сохранен как /etc/config/firewall.bak."